/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package sweetBank;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

/**
 *
 * @author arash
 */
public class frmAccountHistory extends javax.swing.JFrame {

    /**
     * Creates new form frmAccountHistory
     */
    public frmAccountHistory() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("sweetbankdb?zeroDateTimeBehavior=convertToNullPU").createEntityManager();
        accountHistoryQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT a FROM AccountHistory a");
        accountHistoryList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : accountHistoryQuery.getResultList();
        accountHistoryQuery1 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT a FROM AccountHistory a");
        accountHistoryList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : accountHistoryQuery1.getResultList();
        actionTypeQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT a FROM ActionType a");
        actionTypeList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : actionTypeQuery.getResultList();
        accountHistoryQuery2 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT a FROM AccountHistory a");
        accountHistoryList2 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : accountHistoryQuery2.getResultList();
        accountHistoryQuery3 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT a FROM AccountHistory a");
        accountHistoryList3 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : accountHistoryQuery3.getResultList();
        accountHistoryQuery4 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT a FROM AccountHistory a");
        accountHistoryList4 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : accountHistoryQuery4.getResultList();
        accountHistoryQuery5 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT a FROM AccountHistory a");
        accountHistoryList5 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : accountHistoryQuery5.getResultList();
        accountHistoryQuery6 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT a FROM AccountHistory a");
        accountHistoryList6 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : accountHistoryQuery6.getResultList();
        accountHistoryQuery7 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT a FROM AccountHistory a");
        accountHistoryList7 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : accountHistoryQuery7.getResultList();
        accountHistoryQuery8 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT a FROM AccountHistory a");
        accountHistoryList8 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : accountHistoryQuery8.getResultList();
        accountHistoryQuery9 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT a FROM AccountHistory a");
        accountHistoryList9 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : accountHistoryQuery9.getResultList();
        accountHistoryQuery10 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT a FROM AccountHistory a");
        accountHistoryList10 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : accountHistoryQuery10.getResultList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable2.setColumnSelectionAllowed(true);
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable2.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, actionTypeList, jTable2);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${actiontype}"));
        columnBinding.setColumnName("Actiontype");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, actionTypeList, org.jdesktop.beansbinding.ObjectProperty.create(), jTable2, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable2MousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        jTable2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jTable1.setColumnSelectionAllowed(true);
        jTable1.getTableHeader().setReorderingAllowed(false);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, accountHistoryList10, jTable1);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${accountHistoryDate}"));
        columnBinding.setColumnName("Date");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${accountNumber}"));
        columnBinding.setColumnName("Account Number");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${accountOwner}"));
        columnBinding.setColumnName("Name");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${accountBalance}"));
        columnBinding.setColumnName("Balance");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${actionTypeActionId}"));
        columnBinding.setColumnName("Action Type Action Id");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane3.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getColumnModel().getColumn(0).setResizable(false);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(30);
        jTable1.getColumnModel().getColumn(1).setResizable(false);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(45);
        jTable1.getColumnModel().getColumn(2).setResizable(false);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(3).setResizable(false);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(25);
        jTable1.getColumnModel().getColumn(4).setResizable(false);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(20);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sweetbankdb", "root", "root");
            Statement st = con.createStatement();
            String str = jTable2.getValueAt(jTable2.getSelectedRow(),0).toString();
            ResultSet rs = st.executeQuery("SELECT action_id FROM sweetbankdb.action_type where actiontype='" + str + "'");
            rs.next();
            rs = st.executeQuery("SELECT * FROM sweetbankdb.account_history where action_type_action_id='" + rs.getInt("action_id") + "'");
            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
            
        } catch (Exception e) {
            System.out.println("Error: " + e);
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTable2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmAccountHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmAccountHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmAccountHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmAccountHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmAccountHistory().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.util.List<sweetBank.AccountHistory> accountHistoryList;
    private java.util.List<sweetBank.AccountHistory> accountHistoryList1;
    private java.util.List<sweetBank.AccountHistory> accountHistoryList10;
    private java.util.List<sweetBank.AccountHistory> accountHistoryList2;
    private java.util.List<sweetBank.AccountHistory> accountHistoryList3;
    private java.util.List<sweetBank.AccountHistory> accountHistoryList4;
    private java.util.List<sweetBank.AccountHistory> accountHistoryList5;
    private java.util.List<sweetBank.AccountHistory> accountHistoryList6;
    private java.util.List<sweetBank.AccountHistory> accountHistoryList7;
    private java.util.List<sweetBank.AccountHistory> accountHistoryList8;
    private java.util.List<sweetBank.AccountHistory> accountHistoryList9;
    private javax.persistence.Query accountHistoryQuery;
    private javax.persistence.Query accountHistoryQuery1;
    private javax.persistence.Query accountHistoryQuery10;
    private javax.persistence.Query accountHistoryQuery2;
    private javax.persistence.Query accountHistoryQuery3;
    private javax.persistence.Query accountHistoryQuery4;
    private javax.persistence.Query accountHistoryQuery5;
    private javax.persistence.Query accountHistoryQuery6;
    private javax.persistence.Query accountHistoryQuery7;
    private javax.persistence.Query accountHistoryQuery8;
    private javax.persistence.Query accountHistoryQuery9;
    private java.util.List<sweetBank.ActionType> actionTypeList;
    private javax.persistence.Query actionTypeQuery;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
